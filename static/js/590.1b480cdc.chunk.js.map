{"version":3,"file":"static/js/590.1b480cdc.chunk.js","mappings":"+HAGA,UAFW,0xJ","sources":["content/1-study.html"],"sourcesContent":["// Module\nvar code = \"<hr> <h2>title: üë©‚Äçüè´ Crypto 101 description: Your journey to becoming a blockchain expert! category: [&quot;General Cryptography&quot;] date : 24 Oct 2023</h2> <h1>üë©‚Äçüè´ Your journey to becoming a blockchain expert!</h1> <p>Got zero knowledge of blockchains and the underlying technology? Use this reading list to get an extensive knowledge of blockchain-related math and cryptography!</p> <h2>Math:</h2> <ul> <li><a href=\\\"https://medium.loopring.io/learning-cryptography-finite-fields-ced3574a53fe\\\">Finite/Prime Fields</a></li> <li><em><strong>(Easy) Benchmark: Implement a Prime-Field add/sub/mul library in Python!</strong></em></li> <li><em><strong>(Easy) Benchmark: Implement Prime-Field division (Inversion) in Python! (Using euclidean algorithm)</strong></em></li> <li><a href=\\\"https://www.johannes-bauer.com/compsci/ecc/\\\">Elliptic Curve Cryptography</a></li> <li><a href=\\\"https://cryptobook.nakov.com/digital-signatures/ecdsa-sign-verify-messages\\\">ECDSA</a></li> <li><em><strong>(Medium) Benchmark: Implement Secp256k1 curve point addition in pure Python!</strong></em></li> <li><em><strong>(Hard) Benchmark: Implement Secp256k1 sign/verify in pure Python!</strong></em></li> <li><a href=\\\"https://www.zkdocs.com/docs/zkdocs/protocol-primitives/fiat-shamir/\\\">Fiat-Shamir heuristic</a></li> <li><a href=\\\"https://medium.com/iovlabs-innovation-stories/verifiable-delay-functions-8eb6390c5f4\\\">Time-locks and Verifiable Delay Functions</a></li> </ul> <h2>Blockchain/Consensus:</h2> <ul> <li><a href=\\\"https://www.geeksforgeeks.org/implementing-the-proof-of-work-algorithm-in-python-for-blockchain-mining/\\\">Proof-of-Work</a></li> <li><em><strong>(Easy) Benchmark: Implement SHA256 Proof-of-Work in pure Python!</strong></em></li> <li><a href=\\\"https://cranklin.wordpress.com/2017/07/11/lets-create-our-own-cryptocurrency/\\\">A Blockchain from scratch</a></li> <li><em><strong>(Hard) Benchmark: Implement a complete PoW blockchain in Python!</strong></em></li> <li><a href=\\\"https://chain.link/education-hub/verifiable-random-function-vrf\\\">Verifiable Random Functions</a></li> <li><a href=\\\"https://wiki.polkadot.network/docs/learn-consensus\\\">Proof-of-Stake/Ouroboros/BABE</a></li> <li><em><strong>(Very Hard) Benchmark: Implement a VRF-based validator election mechanism, using a VRF library!</strong></em></li> </ul> <h2>Scalability:</h2> <ul> <li><a href=\\\"https://happypeter.github.io/binfo/payment-channels.html\\\">Payment Channels</a></li> <li><em><strong>(Medium) Benchmark: Design a simple payment channel contract with Solidity</strong></em></li> <li><a href=\\\"https://en.bitcoin.it/wiki/Hash_Time_Locked_Contracts\\\">HTLC</a></li> <li><a href=\\\"https://medium.com/@kelvinfichter/whats-a-sparse-merkle-tree-acda70aeb837\\\">Sparse-Merkle-Trees</a></li> <li><em><strong>(Medium) Benchmark: Implement a Sparse-Merkle-Tree in pure Python!</strong></em></li> <li><a href=\\\"https://habr.com/en/articles/455988/\\\">Plasma / Plasma Cash</a></li> <li><em><strong>(Hard) Benchmark: Design a simple Plasma Cash contract with Solidity</strong></em></li> <li><a href=\\\"https://github.com/tanpx12/zk-rollup-tutorial\\\">zkRollup</a></li> <li><em><strong>(Very Hard) Benchmark: Implement a simple zkRollup with Circom</strong></em></li> </ul> <h2>Privacy:</h2> <ul> <li><a href=\\\"https://en.bitcoin.it/wiki/CoinJoin\\\">CoinJoin</a></li> <li><a href=\\\"https://vitalik.ca/general/2023/01/20/stealth.html\\\">Stealth Addresses</a></li> <li><em><strong>(Hard) Benchmark: Implement Stealth Addresses on Secp256k1 curve</strong></em></li> <li><a href=\\\"https://shainer.github.io/crypto/2017/10/15/ring-signatures.html\\\">Ring Signatures</a></li> <li><a href=\\\"https://github.com/tornadocash/tornado-core\\\">Zcash/TornadoCash</a></li> <li><em><strong>(Hard) Benchmark: Implement a simple TornadoCash circuit with Circom</strong></em></li> </ul> <h2>Zero-Knowledge Proofs:</h2> <ul> <li><a href=\\\"https://medium.com/@VitalikButerin/quadratic-arithmetic-programs-from-zero-to-hero-f6d558cea649\\\">R1CS and QAP</a></li> <li><em><strong>(Hard) Benchmark: Implement a library for generation of R1CS circuits and QAP polynomials</strong></em></li> <li><a href=\\\"https://github.com/ziesha-network/zoro\\\">Zero-Knowledge proof circuit design</a></li> <li><em><strong>(Medium) Benchmark: Design and implement various primitive circuits: bit-decomposition, is-zero, equality-check, comparison, multiplexer, hash-function</strong></em></li> <li><a href=\\\"https://docs.circom.io/\\\">Circom language</a></li> <li><a href=\\\"https://vitalik.ca/general/2017/11/09/starks_part_1.html\\\">zkSTARKs</a></li> <li><em><strong>(Super Hard) Benchmark: Implement the zkSTARKs protocol in pure Python!</strong></em></li> <li><a href=\\\"https://eprint.iacr.org/2013/279.pdf\\\">Pinocchio protocol</a></li> <li><em><strong>(Super Hard) Benchmark: Implement the Pinocchio zkSNARKs protocol in pure Python!</strong></em></li> </ul> \";\n// Exports\nexport default code;"],"names":[],"sourceRoot":""}