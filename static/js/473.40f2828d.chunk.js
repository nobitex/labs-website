"use strict";(self.webpackChunktext_md_genrator=self.webpackChunktext_md_genrator||[]).push([[473],{473:function(e,t,o){o.r(t);t.default="<hr> <h2>title: \ud83d\udd83 KZG Polynomial Commitments description: Polynomical commitments are alternatives to merkle trees. category: [&quot;General Cryptography&quot;, &quot;Zero-Knowledge Proofs&quot;] date : 24 Oct 2023</h2> <h1>\ud83d\udd83 KZG Polynomial Commitments</h1> <p>Imagine we want to commit to a vector of secret values, and later we want to make proofs that certain values exist in that list, without revealing the entire list.</p> <p>Most naive implementation of such a tool is a merkle tree. With a merkle tree you can commit to <code>2^n</code> values and make proofs of size <code>log(2^n)=n</code>. (Proof size: <code>O(log(n))</code>)</p> <p>A KZG commitment is a cryptographic tool which can generate proofs for a list of values with <code>O(1)</code> proof sizes.</p> <h2>Math</h2> <p>Imagine our list is <code>[2, 0, 6]</code>.</p> <p>We can represent this list as a polynomial $P(x)$ where $P(1) = 2$, $P(2) = 0$ and $P(3) = 6$. You can find such polynomials for arbitrary lists using an algorithm called <strong>Polynomial Interpolation</strong>.</p> <p>For the mentioned list, the polynomial will be: $P(x) = 4x^2-14x+12$.</p> <p><em><strong>Fact:</strong></em> Value $v$ exists at index $k$ of polynomial commitment $P(x)$ if and only if there exists a polynomial $Q(x)$ where: $Q(x).(x-k) = P(x) - v$. It can be computed by doing a polynomial division: $Q(x)=\\frac{P(x)-v}{x-k}$</p> <p>Now imagine we choose a random value $\\tau$ and commit to the list by calculating $c=P(\\tau)$. (Commitment will be a number)</p> <p><em><strong>Note:</strong></em> You can compute $Q(\\tau)$ only when you know $Q(x)$.</p> <p>Therefore the proof will be $\\pi=Q(\\tau)$. Verifier can check the proof by checking if: $\\pi.(\\tau - k) = c - v$</p> <p>This protocol can be easily hacked since it works with numbers. We can easily calculate a fake proof by calculating $\\pi = \\frac{c - v}{\\tau - k}$.</p> <h3>Switching to elliptic curve points</h3> <p>Instead of using numbers, we can use elliptic curve points.</p> <p>The commitment will be $c=g^{P(\\tau)}$.</p> <p>The proof will be $\\pi=g^{Q(\\tau)}$</p> <p>The verification check will be: $g^{Q(\\tau).(\\tau - k)} = g^{P(\\tau) - v}$, which in other words is: $\\pi^{\\tau - k}.g^v=c$</p> <p>(Notice that one can't easily calculate \\pi because of the discrete logarithm problem on elliptic curves)</p> <p>The verification check can also be done by a elliptic curve pairing function.</p> <p>(Pairing function: $e(g^a, g^b) = G^{ab}$)</p> <p>Check: $e(\\frac{c}{g^v}, g) = e(\\pi, \\frac{g^\\tau}{g^k})$</p> <p><em><strong>Question:</strong></em> how can we do elliptic curve division here?</p> <p><em><strong>Possible Answer:</strong></em> Maybe the prover is also giving $\\frac{c}{g^v}$ and $\\frac{g^\\tau}{g^k}$ as part of the proof (The prover can calculate those values). Verifier can check their correctness by checking if:</p> <p>$\\frac{c}{g^v}.g^v = c$ and $\\frac{g^\\tau}{g^k}.g^k=g^\\tau$</p> "}}]);
//# sourceMappingURL=473.40f2828d.chunk.js.map